[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_package_share_directory",
        "importPath": "ament_index_python",
        "description": "ament_index_python",
        "isExtraImport": true,
        "detail": "ament_index_python",
        "documentation": {}
    },
    {
        "label": "get_package_share_directory",
        "importPath": "ament_index_python",
        "description": "ament_index_python",
        "isExtraImport": true,
        "detail": "ament_index_python",
        "documentation": {}
    },
    {
        "label": "LaunchDescription",
        "importPath": "launch",
        "description": "launch",
        "isExtraImport": true,
        "detail": "launch",
        "documentation": {}
    },
    {
        "label": "LaunchDescription",
        "importPath": "launch",
        "description": "launch",
        "isExtraImport": true,
        "detail": "launch",
        "documentation": {}
    },
    {
        "label": "LaunchDescription",
        "importPath": "launch",
        "description": "launch",
        "isExtraImport": true,
        "detail": "launch",
        "documentation": {}
    },
    {
        "label": "LaunchDescription",
        "importPath": "launch",
        "description": "launch",
        "isExtraImport": true,
        "detail": "launch",
        "documentation": {}
    },
    {
        "label": "LaunchDescription",
        "importPath": "launch",
        "description": "launch",
        "isExtraImport": true,
        "detail": "launch",
        "documentation": {}
    },
    {
        "label": "LaunchDescription",
        "importPath": "launch",
        "description": "launch",
        "isExtraImport": true,
        "detail": "launch",
        "documentation": {}
    },
    {
        "label": "LaunchDescription",
        "importPath": "launch",
        "description": "launch",
        "isExtraImport": true,
        "detail": "launch",
        "documentation": {}
    },
    {
        "label": "LaunchDescription",
        "importPath": "launch",
        "description": "launch",
        "isExtraImport": true,
        "detail": "launch",
        "documentation": {}
    },
    {
        "label": "IncludeLaunchDescription",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "TimerAction",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "DeclareLaunchArgument",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "IncludeLaunchDescription",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "DeclareLaunchArgument",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "IncludeLaunchDescription",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "DeclareLaunchArgument",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "IncludeLaunchDescription",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "DeclareLaunchArgument",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "IncludeLaunchDescription",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "TimerAction",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "IncludeLaunchDescription",
        "importPath": "launch.actions",
        "description": "launch.actions",
        "isExtraImport": true,
        "detail": "launch.actions",
        "documentation": {}
    },
    {
        "label": "PythonLaunchDescriptionSource",
        "importPath": "launch.launch_description_sources",
        "description": "launch.launch_description_sources",
        "isExtraImport": true,
        "detail": "launch.launch_description_sources",
        "documentation": {}
    },
    {
        "label": "PythonLaunchDescriptionSource",
        "importPath": "launch.launch_description_sources",
        "description": "launch.launch_description_sources",
        "isExtraImport": true,
        "detail": "launch.launch_description_sources",
        "documentation": {}
    },
    {
        "label": "PythonLaunchDescriptionSource",
        "importPath": "launch.launch_description_sources",
        "description": "launch.launch_description_sources",
        "isExtraImport": true,
        "detail": "launch.launch_description_sources",
        "documentation": {}
    },
    {
        "label": "PythonLaunchDescriptionSource",
        "importPath": "launch.launch_description_sources",
        "description": "launch.launch_description_sources",
        "isExtraImport": true,
        "detail": "launch.launch_description_sources",
        "documentation": {}
    },
    {
        "label": "PythonLaunchDescriptionSource",
        "importPath": "launch.launch_description_sources",
        "description": "launch.launch_description_sources",
        "isExtraImport": true,
        "detail": "launch.launch_description_sources",
        "documentation": {}
    },
    {
        "label": "PythonLaunchDescriptionSource",
        "importPath": "launch.launch_description_sources",
        "description": "launch.launch_description_sources",
        "isExtraImport": true,
        "detail": "launch.launch_description_sources",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "PathJoinSubstitution",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "LaunchConfiguration",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "PathJoinSubstitution",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "LaunchConfiguration",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "PathJoinSubstitution",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "LaunchConfiguration",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "PathJoinSubstitution",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "LaunchConfiguration",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "PathJoinSubstitution",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "PathJoinSubstitution",
        "importPath": "launch.substitutions",
        "description": "launch.substitutions",
        "isExtraImport": true,
        "detail": "launch.substitutions",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "launch_ros.actions",
        "description": "launch_ros.actions",
        "isExtraImport": true,
        "detail": "launch_ros.actions",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "launch_ros.actions",
        "description": "launch_ros.actions",
        "isExtraImport": true,
        "detail": "launch_ros.actions",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "launch_ros.actions",
        "description": "launch_ros.actions",
        "isExtraImport": true,
        "detail": "launch_ros.actions",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "launch_ros.actions",
        "description": "launch_ros.actions",
        "isExtraImport": true,
        "detail": "launch_ros.actions",
        "documentation": {}
    },
    {
        "label": "FindPackageShare",
        "importPath": "launch_ros.substitutions",
        "description": "launch_ros.substitutions",
        "isExtraImport": true,
        "detail": "launch_ros.substitutions",
        "documentation": {}
    },
    {
        "label": "FindPackageShare",
        "importPath": "launch_ros.substitutions",
        "description": "launch_ros.substitutions",
        "isExtraImport": true,
        "detail": "launch_ros.substitutions",
        "documentation": {}
    },
    {
        "label": "FindPackageShare",
        "importPath": "launch_ros.substitutions",
        "description": "launch_ros.substitutions",
        "isExtraImport": true,
        "detail": "launch_ros.substitutions",
        "documentation": {}
    },
    {
        "label": "FindPackageShare",
        "importPath": "launch_ros.substitutions",
        "description": "launch_ros.substitutions",
        "isExtraImport": true,
        "detail": "launch_ros.substitutions",
        "documentation": {}
    },
    {
        "label": "FindPackageShare",
        "importPath": "launch_ros.substitutions",
        "description": "launch_ros.substitutions",
        "isExtraImport": true,
        "detail": "launch_ros.substitutions",
        "documentation": {}
    },
    {
        "label": "FindPackageShare",
        "importPath": "launch_ros.substitutions",
        "description": "launch_ros.substitutions",
        "isExtraImport": true,
        "detail": "launch_ros.substitutions",
        "documentation": {}
    },
    {
        "label": "UnlessCondition",
        "importPath": "launch.conditions",
        "description": "launch.conditions",
        "isExtraImport": true,
        "detail": "launch.conditions",
        "documentation": {}
    },
    {
        "label": "UnlessCondition",
        "importPath": "launch.conditions",
        "description": "launch.conditions",
        "isExtraImport": true,
        "detail": "launch.conditions",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "generate_launch_description",
        "kind": 2,
        "importPath": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "description": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "peekOfCode": "def generate_launch_description():  # pylint: disable=missing-function-docstring\n    return LaunchDescription([\n        launch_robot_state_publisher(),\n        *launch_gazebo(),\n        spawn_robot()\n    ])\ndef launch_robot_state_publisher():\n    \"\"\"Launch robot state publisher\"\"\"\n    # Get current ros2 package path\n    pkg_path = FindPackageShare(\"mm_gps_nav_simulation\")",
        "detail": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "documentation": {}
    },
    {
        "label": "launch_robot_state_publisher",
        "kind": 2,
        "importPath": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "description": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "peekOfCode": "def launch_robot_state_publisher():\n    \"\"\"Launch robot state publisher\"\"\"\n    # Get current ros2 package path\n    pkg_path = FindPackageShare(\"mm_gps_nav_simulation\")\n    # Get urdf file path\n    urdf = PathJoinSubstitution([pkg_path, \"urdf\", \"robot.urdf.xacro\"])\n    # Generate robot description\n    robot_description = Command([\"xacro \", urdf])\n    return Node(\n        package=\"robot_state_publisher\",",
        "detail": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "documentation": {}
    },
    {
        "label": "launch_gazebo",
        "kind": 2,
        "importPath": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "description": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "peekOfCode": "def launch_gazebo() -> list:\n    \"\"\"Launch gazebo\"\"\"\n    # Get current package path\n    pkg_path = FindPackageShare(\"mm_gps_nav_simulation\")\n    # Set gazebo model path\n    global_share_path = os.path.join(get_package_share_directory(\"mm_gps_nav_simulation\"), \"../\")\n    home_path = os.environ[\"HOME\"]\n    os.environ[\"GAZEBO_MODEL_PATH\"] = f\"{global_share_path}/:{home_path}/.gazebo/models\"\n    # Get gazebo launch file path\n    pkg_gazebo_ros_path = FindPackageShare(\"gazebo_ros\")",
        "detail": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "documentation": {}
    },
    {
        "label": "spawn_robot",
        "kind": 2,
        "importPath": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "description": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "peekOfCode": "def spawn_robot():\n    \"\"\"Spwan robot in gazebo\"\"\"\n    x_pose = \"0.0\"\n    y_pose = \"0.0\"\n    spawn_ppr_robot_cmd = Node(\n        package=\"gazebo_ros\",\n        executable=\"spawn_entity.py\",\n        arguments=[\n            \"-topic\",\n            \"robot_description\",",
        "detail": "install.share.mm_gps_nav_simulation.launch.rsp.launch",
        "documentation": {}
    },
    {
        "label": "generate_launch_description",
        "kind": 2,
        "importPath": "install.share.mm_robot_bringup.launch.bringup.launch",
        "description": "install.share.mm_robot_bringup.launch.bringup.launch",
        "peekOfCode": "def generate_launch_description():\n    \"\"\"\n    机器人按如下顺序启动：\n    1. 启动 robot_state_publisher\n    2. 如果 use_sim_time 为 true, 启动模拟环境\n    3. 启动机器人硬件相关模块\n    4. 启动 ros2_control 相关\n    5. 启动 navigation 相关\n    6. 启动模块管理器\n    7. 启动 rviz2",
        "detail": "install.share.mm_robot_bringup.launch.bringup.launch",
        "documentation": {}
    },
    {
        "label": "declare_launch_arguments",
        "kind": 2,
        "importPath": "install.share.mm_robot_bringup.launch.bringup.launch",
        "description": "install.share.mm_robot_bringup.launch.bringup.launch",
        "peekOfCode": "def declare_launch_arguments() -> list:\n    \"\"\"Declare launch arguments\"\"\"\n    return [\n        DeclareLaunchArgument(\n            \"use_sim_time\",\n            default_value=\"false\",\n        )\n    ]\ndef launch_robot_state_publisher():\n    \"\"\"Launch robot state publisher\"\"\"",
        "detail": "install.share.mm_robot_bringup.launch.bringup.launch",
        "documentation": {}
    },
    {
        "label": "launch_robot_state_publisher",
        "kind": 2,
        "importPath": "install.share.mm_robot_bringup.launch.bringup.launch",
        "description": "install.share.mm_robot_bringup.launch.bringup.launch",
        "peekOfCode": "def launch_robot_state_publisher():\n    \"\"\"Launch robot state publisher\"\"\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\", default=\"false\")\n    robot_pkg_path = FindPackageShare(\"mm_robot_description\")\n    urdf_file = PathJoinSubstitution([robot_pkg_path, \"urdf\", \"robot.urdf.xacro\"])\n    rsp_launch_file = PathJoinSubstitution([robot_pkg_path, \"launch\", \"rsp.launch.py\"])\n    return IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(rsp_launch_file),\n        launch_arguments={\"use_sim_time\": use_sim_time, \"urdf\": urdf_file}.items(),\n        condition=UnlessCondition(use_sim_time)",
        "detail": "install.share.mm_robot_bringup.launch.bringup.launch",
        "documentation": {}
    },
    {
        "label": "launch_ros2_control",
        "kind": 2,
        "importPath": "install.share.mm_robot_bringup.launch.bringup.launch",
        "description": "install.share.mm_robot_bringup.launch.bringup.launch",
        "peekOfCode": "def launch_ros2_control() -> list:\n    \"\"\"启动 ros2_control 相关\"\"\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\", default=\"false\")\n    bringup_pkg = FindPackageShare(\"mm_robot_bringup\")\n    # config_file = PathJoinSubstitution(\n    #     [robot_pkg, f\"{'simulation/' if sim else ''}configs\", \"controllers.yaml\"])\n    ros2_control_launch_file = PathJoinSubstitution(\n        [bringup_pkg, \"launch\", \"ros2_control.launch.py\"])\n    return IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(ros2_control_launch_file),",
        "detail": "install.share.mm_robot_bringup.launch.bringup.launch",
        "documentation": {}
    },
    {
        "label": "generate_launch_description",
        "kind": 2,
        "importPath": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "description": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "peekOfCode": "def generate_launch_description():  # pylint: disable=missing-function-docstring\n    return LaunchDescription([\n        *declare_launch_arguments(),\n        spawn_diff_drive_controller(),\n        spawn_joint_broad_controller(),\n    ])\ndef declare_launch_arguments() -> list:\n    \"\"\"Declare launch arguments\"\"\"\n    return [\n        DeclareLaunchArgument(",
        "detail": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "documentation": {}
    },
    {
        "label": "declare_launch_arguments",
        "kind": 2,
        "importPath": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "description": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "peekOfCode": "def declare_launch_arguments() -> list:\n    \"\"\"Declare launch arguments\"\"\"\n    return [\n        DeclareLaunchArgument(\n            \"use_sim_time\",\n            default_value=\"false\"\n        )\n    ]\n# def launch_controller_manager_if_needed():\n#     \"\"\"启动 controller_manager\"\"\"",
        "detail": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "documentation": {}
    },
    {
        "label": "spawn_diff_drive_controller",
        "kind": 2,
        "importPath": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "description": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "peekOfCode": "def spawn_diff_drive_controller():\n    \"\"\"Spawn diff drive controller\"\"\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\", default=\"false\")\n    return Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"diff_cont\"],\n        output=\"screen\",\n        parameters=[{\"use_sim_time\": use_sim_time}],\n    )",
        "detail": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "documentation": {}
    },
    {
        "label": "spawn_joint_broad_controller",
        "kind": 2,
        "importPath": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "description": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "peekOfCode": "def spawn_joint_broad_controller():\n    \"\"\"Spawn joint broad controller\"\"\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\", default=\"false\")\n    return Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"joint_broad\"],\n        output=\"screen\",\n        parameters=[{\"use_sim_time\": use_sim_time}],\n    )",
        "detail": "install.share.mm_robot_bringup.launch.ros2_control.launch",
        "documentation": {}
    },
    {
        "label": "generate_launch_description",
        "kind": 2,
        "importPath": "install.share.mm_robot_description.launch.urdf.launch",
        "description": "install.share.mm_robot_description.launch.urdf.launch",
        "peekOfCode": "def generate_launch_description():  # pylint: disable=missing-function-docstring\n    # Get current ros2 package path\n    pkg_path = FindPackageShare(\"mm_robot_description\")\n    # Get urdf file path\n    urdf = PathJoinSubstitution([pkg_path, \"urdf\", \"robot.urdf.xacro\"])\n    # Get urdf launch file path\n    urdf_tutorial_launch_file = PathJoinSubstitution(\n        [FindPackageShare(\"urdf_tutorial\"), \"launch\", \"display.launch.py\"])\n    # Start urdf display node\n    start_urdf_display = IncludeLaunchDescription(",
        "detail": "install.share.mm_robot_description.launch.urdf.launch",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "def main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',\n        help='The file extension of the primary shell')\n    parser.add_argument(\n        'additional_extension', nargs='?',\n        help='The additional file extension to be considered')",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "get_packages",
        "kind": 2,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "def get_packages(prefix_path, merged_install):\n    \"\"\"\n    Find packages based on colcon-specific files created during installation.\n    :param Path prefix_path: The install prefix path of all packages\n    :param bool merged_install: The flag if the packages are all installed\n      directly in the prefix or if each package is installed in a subdirectory\n      named after the package\n    :returns: A mapping from the package name to the set of runtime\n      dependencies\n    :rtype: dict",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "add_package_runtime_dependencies",
        "kind": 2,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "def add_package_runtime_dependencies(path, packages):\n    \"\"\"\n    Check the path and if it exists extract the packages runtime dependencies.\n    :param Path path: The resource file containing the runtime dependencies\n    :param dict packages: A mapping from package names to the sets of runtime\n      dependencies to add to\n    \"\"\"\n    content = path.read_text()\n    dependencies = set(content.split(os.pathsep) if content else [])\n    packages[path.name] = dependencies",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "order_packages",
        "kind": 2,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "def order_packages(packages):\n    \"\"\"\n    Order packages topologically.\n    :param dict packages: A mapping from package name to the set of runtime\n      dependencies\n    :returns: The package names\n    :rtype: list\n    \"\"\"\n    # select packages with no dependencies in alphabetical order\n    to_be_ordered = list(packages.keys())",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "reduce_cycle_set",
        "kind": 2,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "def reduce_cycle_set(packages):\n    \"\"\"\n    Reduce the set of packages to the ones part of the circular dependency.\n    :param dict packages: A mapping from package name to the set of runtime\n      dependencies which is modified in place\n    \"\"\"\n    last_depended = None\n    while len(packages) > 0:\n        # get all remaining dependencies\n        depended = set()",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "get_commands",
        "kind": 2,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "def get_commands(pkg_name, prefix, primary_extension, additional_extension):\n    commands = []\n    package_dsv_path = os.path.join(prefix, 'share', pkg_name, 'package.dsv')\n    if os.path.exists(package_dsv_path):\n        commands += process_dsv_file(\n            package_dsv_path, prefix, primary_extension, additional_extension)\n    return commands\ndef process_dsv_file(\n    dsv_path, prefix, primary_extension=None, additional_extension=None\n):",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "process_dsv_file",
        "kind": 2,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "def process_dsv_file(\n    dsv_path, prefix, primary_extension=None, additional_extension=None\n):\n    commands = []\n    if _include_comments():\n        commands.append(FORMAT_STR_COMMENT_LINE.format_map({'comment': dsv_path}))\n    with open(dsv_path, 'r') as h:\n        content = h.read()\n    lines = content.splitlines()\n    basenames = OrderedDict()",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "handle_dsv_types_except_source",
        "kind": 2,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "def handle_dsv_types_except_source(type_, remainder, prefix):\n    commands = []\n    if type_ in (DSV_TYPE_SET, DSV_TYPE_SET_IF_UNSET):\n        try:\n            env_name, value = remainder.split(';', 1)\n        except ValueError:\n            raise RuntimeError(\n                \"doesn't contain a semicolon separating the environment name \"\n                'from the value')\n        try_prefixed_value = os.path.join(prefix, value) if value else prefix",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_COMMENT_LINE",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "FORMAT_STR_COMMENT_LINE = '# {comment}'\nFORMAT_STR_SET_ENV_VAR = 'Set-Item -Path \"Env:{name}\" -Value \"{value}\"'\nFORMAT_STR_USE_ENV_VAR = '$env:{name}'\nFORMAT_STR_INVOKE_SCRIPT = '_colcon_prefix_powershell_source_script \"{script_path}\"'\nFORMAT_STR_REMOVE_LEADING_SEPARATOR = ''\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = ''\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_SET_ENV_VAR",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "FORMAT_STR_SET_ENV_VAR = 'Set-Item -Path \"Env:{name}\" -Value \"{value}\"'\nFORMAT_STR_USE_ENV_VAR = '$env:{name}'\nFORMAT_STR_INVOKE_SCRIPT = '_colcon_prefix_powershell_source_script \"{script_path}\"'\nFORMAT_STR_REMOVE_LEADING_SEPARATOR = ''\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = ''\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_USE_ENV_VAR",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "FORMAT_STR_USE_ENV_VAR = '$env:{name}'\nFORMAT_STR_INVOKE_SCRIPT = '_colcon_prefix_powershell_source_script \"{script_path}\"'\nFORMAT_STR_REMOVE_LEADING_SEPARATOR = ''\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = ''\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_INVOKE_SCRIPT",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "FORMAT_STR_INVOKE_SCRIPT = '_colcon_prefix_powershell_source_script \"{script_path}\"'\nFORMAT_STR_REMOVE_LEADING_SEPARATOR = ''\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = ''\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_REMOVE_LEADING_SEPARATOR",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "FORMAT_STR_REMOVE_LEADING_SEPARATOR = ''\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = ''\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_REMOVE_TRAILING_SEPARATOR",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "FORMAT_STR_REMOVE_TRAILING_SEPARATOR = ''\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_APPEND_NON_DUPLICATE",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "DSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_PREPEND_NON_DUPLICATE",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "DSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "DSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_SET",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "DSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',\n        help='The file extension of the primary shell')",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_SET_IF_UNSET",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "DSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',\n        help='The file extension of the primary shell')\n    parser.add_argument(",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_SOURCE",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "DSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',\n        help='The file extension of the primary shell')\n    parser.add_argument(\n        'additional_extension', nargs='?',",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "env_state",
        "kind": 5,
        "importPath": "install._local_setup_util_ps1",
        "description": "install._local_setup_util_ps1",
        "peekOfCode": "env_state = {}\ndef _append_unique_value(name, value):\n    global env_state\n    if name not in env_state:\n        if os.environ.get(name):\n            env_state[name] = set(os.environ[name].split(os.pathsep))\n        else:\n            env_state[name] = set()\n    # append even if the variable has not been set yet, in case a shell script sets the\n    # same variable without the knowledge of this Python script.",
        "detail": "install._local_setup_util_ps1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "def main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',\n        help='The file extension of the primary shell')\n    parser.add_argument(\n        'additional_extension', nargs='?',\n        help='The additional file extension to be considered')",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "get_packages",
        "kind": 2,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "def get_packages(prefix_path, merged_install):\n    \"\"\"\n    Find packages based on colcon-specific files created during installation.\n    :param Path prefix_path: The install prefix path of all packages\n    :param bool merged_install: The flag if the packages are all installed\n      directly in the prefix or if each package is installed in a subdirectory\n      named after the package\n    :returns: A mapping from the package name to the set of runtime\n      dependencies\n    :rtype: dict",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "add_package_runtime_dependencies",
        "kind": 2,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "def add_package_runtime_dependencies(path, packages):\n    \"\"\"\n    Check the path and if it exists extract the packages runtime dependencies.\n    :param Path path: The resource file containing the runtime dependencies\n    :param dict packages: A mapping from package names to the sets of runtime\n      dependencies to add to\n    \"\"\"\n    content = path.read_text()\n    dependencies = set(content.split(os.pathsep) if content else [])\n    packages[path.name] = dependencies",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "order_packages",
        "kind": 2,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "def order_packages(packages):\n    \"\"\"\n    Order packages topologically.\n    :param dict packages: A mapping from package name to the set of runtime\n      dependencies\n    :returns: The package names\n    :rtype: list\n    \"\"\"\n    # select packages with no dependencies in alphabetical order\n    to_be_ordered = list(packages.keys())",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "reduce_cycle_set",
        "kind": 2,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "def reduce_cycle_set(packages):\n    \"\"\"\n    Reduce the set of packages to the ones part of the circular dependency.\n    :param dict packages: A mapping from package name to the set of runtime\n      dependencies which is modified in place\n    \"\"\"\n    last_depended = None\n    while len(packages) > 0:\n        # get all remaining dependencies\n        depended = set()",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "get_commands",
        "kind": 2,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "def get_commands(pkg_name, prefix, primary_extension, additional_extension):\n    commands = []\n    package_dsv_path = os.path.join(prefix, 'share', pkg_name, 'package.dsv')\n    if os.path.exists(package_dsv_path):\n        commands += process_dsv_file(\n            package_dsv_path, prefix, primary_extension, additional_extension)\n    return commands\ndef process_dsv_file(\n    dsv_path, prefix, primary_extension=None, additional_extension=None\n):",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "process_dsv_file",
        "kind": 2,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "def process_dsv_file(\n    dsv_path, prefix, primary_extension=None, additional_extension=None\n):\n    commands = []\n    if _include_comments():\n        commands.append(FORMAT_STR_COMMENT_LINE.format_map({'comment': dsv_path}))\n    with open(dsv_path, 'r') as h:\n        content = h.read()\n    lines = content.splitlines()\n    basenames = OrderedDict()",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "handle_dsv_types_except_source",
        "kind": 2,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "def handle_dsv_types_except_source(type_, remainder, prefix):\n    commands = []\n    if type_ in (DSV_TYPE_SET, DSV_TYPE_SET_IF_UNSET):\n        try:\n            env_name, value = remainder.split(';', 1)\n        except ValueError:\n            raise RuntimeError(\n                \"doesn't contain a semicolon separating the environment name \"\n                'from the value')\n        try_prefixed_value = os.path.join(prefix, value) if value else prefix",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_COMMENT_LINE",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "FORMAT_STR_COMMENT_LINE = '# {comment}'\nFORMAT_STR_SET_ENV_VAR = 'export {name}=\"{value}\"'\nFORMAT_STR_USE_ENV_VAR = '${name}'\nFORMAT_STR_INVOKE_SCRIPT = 'COLCON_CURRENT_PREFIX=\"{prefix}\" _colcon_prefix_sh_source_script \"{script_path}\"'\nFORMAT_STR_REMOVE_LEADING_SEPARATOR = 'if [ \"$(echo -n ${name} | head -c 1)\" = \":\" ]; then export {name}=${{{name}#?}} ; fi'\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = 'if [ \"$(echo -n ${name} | tail -c 1)\" = \":\" ]; then export {name}=${{{name}%?}} ; fi'\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_SET_ENV_VAR",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "FORMAT_STR_SET_ENV_VAR = 'export {name}=\"{value}\"'\nFORMAT_STR_USE_ENV_VAR = '${name}'\nFORMAT_STR_INVOKE_SCRIPT = 'COLCON_CURRENT_PREFIX=\"{prefix}\" _colcon_prefix_sh_source_script \"{script_path}\"'\nFORMAT_STR_REMOVE_LEADING_SEPARATOR = 'if [ \"$(echo -n ${name} | head -c 1)\" = \":\" ]; then export {name}=${{{name}#?}} ; fi'\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = 'if [ \"$(echo -n ${name} | tail -c 1)\" = \":\" ]; then export {name}=${{{name}%?}} ; fi'\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_USE_ENV_VAR",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "FORMAT_STR_USE_ENV_VAR = '${name}'\nFORMAT_STR_INVOKE_SCRIPT = 'COLCON_CURRENT_PREFIX=\"{prefix}\" _colcon_prefix_sh_source_script \"{script_path}\"'\nFORMAT_STR_REMOVE_LEADING_SEPARATOR = 'if [ \"$(echo -n ${name} | head -c 1)\" = \":\" ]; then export {name}=${{{name}#?}} ; fi'\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = 'if [ \"$(echo -n ${name} | tail -c 1)\" = \":\" ]; then export {name}=${{{name}%?}} ; fi'\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_INVOKE_SCRIPT",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "FORMAT_STR_INVOKE_SCRIPT = 'COLCON_CURRENT_PREFIX=\"{prefix}\" _colcon_prefix_sh_source_script \"{script_path}\"'\nFORMAT_STR_REMOVE_LEADING_SEPARATOR = 'if [ \"$(echo -n ${name} | head -c 1)\" = \":\" ]; then export {name}=${{{name}#?}} ; fi'\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = 'if [ \"$(echo -n ${name} | tail -c 1)\" = \":\" ]; then export {name}=${{{name}%?}} ; fi'\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_REMOVE_LEADING_SEPARATOR",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "FORMAT_STR_REMOVE_LEADING_SEPARATOR = 'if [ \"$(echo -n ${name} | head -c 1)\" = \":\" ]; then export {name}=${{{name}#?}} ; fi'\nFORMAT_STR_REMOVE_TRAILING_SEPARATOR = 'if [ \"$(echo -n ${name} | tail -c 1)\" = \":\" ]; then export {name}=${{{name}%?}} ; fi'\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "FORMAT_STR_REMOVE_TRAILING_SEPARATOR",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "FORMAT_STR_REMOVE_TRAILING_SEPARATOR = 'if [ \"$(echo -n ${name} | tail -c 1)\" = \":\" ]; then export {name}=${{{name}%?}} ; fi'\nDSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_APPEND_NON_DUPLICATE",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "DSV_TYPE_APPEND_NON_DUPLICATE = 'append-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_PREPEND_NON_DUPLICATE",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "DSV_TYPE_PREPEND_NON_DUPLICATE = 'prepend-non-duplicate'\nDSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "DSV_TYPE_PREPEND_NON_DUPLICATE_IF_EXISTS = 'prepend-non-duplicate-if-exists'\nDSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_SET",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "DSV_TYPE_SET = 'set'\nDSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',\n        help='The file extension of the primary shell')",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_SET_IF_UNSET",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "DSV_TYPE_SET_IF_UNSET = 'set-if-unset'\nDSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',\n        help='The file extension of the primary shell')\n    parser.add_argument(",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "DSV_TYPE_SOURCE",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "DSV_TYPE_SOURCE = 'source'\ndef main(argv=sys.argv[1:]):  # noqa: D103\n    parser = argparse.ArgumentParser(\n        description='Output shell commands for the packages in topological '\n                    'order')\n    parser.add_argument(\n        'primary_extension',\n        help='The file extension of the primary shell')\n    parser.add_argument(\n        'additional_extension', nargs='?',",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "env_state",
        "kind": 5,
        "importPath": "install._local_setup_util_sh",
        "description": "install._local_setup_util_sh",
        "peekOfCode": "env_state = {}\ndef _append_unique_value(name, value):\n    global env_state\n    if name not in env_state:\n        if os.environ.get(name):\n            env_state[name] = set(os.environ[name].split(os.pathsep))\n        else:\n            env_state[name] = set()\n    # append even if the variable has not been set yet, in case a shell script sets the\n    # same variable without the knowledge of this Python script.",
        "detail": "install._local_setup_util_sh",
        "documentation": {}
    },
    {
        "label": "generate_launch_description",
        "kind": 2,
        "importPath": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "description": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "peekOfCode": "def generate_launch_description():\n    \"\"\"\n    机器人按如下顺序启动：\n    1. 启动 robot_state_publisher\n    2. 如果 use_sim_time 为 true, 启动模拟环境\n    3. 启动机器人硬件相关模块\n    4. 启动 ros2_control 相关\n    5. 启动 navigation 相关\n    6. 启动模块管理器\n    7. 启动 rviz2",
        "detail": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "documentation": {}
    },
    {
        "label": "declare_launch_arguments",
        "kind": 2,
        "importPath": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "description": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "peekOfCode": "def declare_launch_arguments() -> list:\n    \"\"\"Declare launch arguments\"\"\"\n    return [\n        DeclareLaunchArgument(\n            \"use_sim_time\",\n            default_value=\"false\",\n        )\n    ]\ndef launch_robot_state_publisher():\n    \"\"\"Launch robot state publisher\"\"\"",
        "detail": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "documentation": {}
    },
    {
        "label": "launch_robot_state_publisher",
        "kind": 2,
        "importPath": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "description": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "peekOfCode": "def launch_robot_state_publisher():\n    \"\"\"Launch robot state publisher\"\"\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\", default=\"false\")\n    robot_pkg_path = FindPackageShare(\"mm_robot_description\")\n    urdf_file = PathJoinSubstitution([robot_pkg_path, \"urdf\", \"robot.urdf.xacro\"])\n    rsp_launch_file = PathJoinSubstitution([robot_pkg_path, \"launch\", \"rsp.launch.py\"])\n    return IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(rsp_launch_file),\n        launch_arguments={\"use_sim_time\": use_sim_time, \"urdf\": urdf_file}.items(),\n        condition=UnlessCondition(use_sim_time)",
        "detail": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "documentation": {}
    },
    {
        "label": "launch_ros2_control",
        "kind": 2,
        "importPath": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "description": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "peekOfCode": "def launch_ros2_control() -> list:\n    \"\"\"启动 ros2_control 相关\"\"\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\", default=\"false\")\n    bringup_pkg = FindPackageShare(\"mm_robot_bringup\")\n    # config_file = PathJoinSubstitution(\n    #     [robot_pkg, f\"{'simulation/' if sim else ''}configs\", \"controllers.yaml\"])\n    ros2_control_launch_file = PathJoinSubstitution(\n        [bringup_pkg, \"launch\", \"ros2_control.launch.py\"])\n    return IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(ros2_control_launch_file),",
        "detail": "src.bringup.mm_robot_bringup.launch.bringup.launch",
        "documentation": {}
    },
    {
        "label": "generate_launch_description",
        "kind": 2,
        "importPath": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "description": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "peekOfCode": "def generate_launch_description():  # pylint: disable=missing-function-docstring\n    return LaunchDescription([\n        *declare_launch_arguments(),\n        spawn_diff_drive_controller(),\n        spawn_joint_broad_controller(),\n    ])\ndef declare_launch_arguments() -> list:\n    \"\"\"Declare launch arguments\"\"\"\n    return [\n        DeclareLaunchArgument(",
        "detail": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "documentation": {}
    },
    {
        "label": "declare_launch_arguments",
        "kind": 2,
        "importPath": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "description": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "peekOfCode": "def declare_launch_arguments() -> list:\n    \"\"\"Declare launch arguments\"\"\"\n    return [\n        DeclareLaunchArgument(\n            \"use_sim_time\",\n            default_value=\"false\"\n        )\n    ]\n# def launch_controller_manager_if_needed():\n#     \"\"\"启动 controller_manager\"\"\"",
        "detail": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "documentation": {}
    },
    {
        "label": "spawn_diff_drive_controller",
        "kind": 2,
        "importPath": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "description": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "peekOfCode": "def spawn_diff_drive_controller():\n    \"\"\"Spawn diff drive controller\"\"\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\", default=\"false\")\n    return Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"diff_cont\"],\n        output=\"screen\",\n        parameters=[{\"use_sim_time\": use_sim_time}],\n    )",
        "detail": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "documentation": {}
    },
    {
        "label": "spawn_joint_broad_controller",
        "kind": 2,
        "importPath": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "description": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "peekOfCode": "def spawn_joint_broad_controller():\n    \"\"\"Spawn joint broad controller\"\"\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\", default=\"false\")\n    return Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\"joint_broad\"],\n        output=\"screen\",\n        parameters=[{\"use_sim_time\": use_sim_time}],\n    )",
        "detail": "src.bringup.mm_robot_bringup.launch.ros2_control.launch",
        "documentation": {}
    },
    {
        "label": "generate_launch_description",
        "kind": 2,
        "importPath": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "description": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "peekOfCode": "def generate_launch_description():  # pylint: disable=missing-function-docstring\n    return LaunchDescription([\n        launch_robot_state_publisher(),\n        *launch_gazebo(),\n        spawn_robot()\n    ])\ndef launch_robot_state_publisher():\n    \"\"\"Launch robot state publisher\"\"\"\n    # Get current ros2 package path\n    pkg_path = FindPackageShare(\"mm_gps_nav_simulation\")",
        "detail": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "documentation": {}
    },
    {
        "label": "launch_robot_state_publisher",
        "kind": 2,
        "importPath": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "description": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "peekOfCode": "def launch_robot_state_publisher():\n    \"\"\"Launch robot state publisher\"\"\"\n    # Get current ros2 package path\n    pkg_path = FindPackageShare(\"mm_gps_nav_simulation\")\n    # Get urdf file path\n    urdf = PathJoinSubstitution([pkg_path, \"urdf\", \"robot.urdf.xacro\"])\n    # Generate robot description\n    robot_description = Command([\"xacro \", urdf])\n    return Node(\n        package=\"robot_state_publisher\",",
        "detail": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "documentation": {}
    },
    {
        "label": "launch_gazebo",
        "kind": 2,
        "importPath": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "description": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "peekOfCode": "def launch_gazebo() -> list:\n    \"\"\"Launch gazebo\"\"\"\n    # Get current package path\n    pkg_path = FindPackageShare(\"mm_gps_nav_simulation\")\n    # Set gazebo model path\n    global_share_path = os.path.join(get_package_share_directory(\"mm_gps_nav_simulation\"), \"../\")\n    home_path = os.environ[\"HOME\"]\n    os.environ[\"GAZEBO_MODEL_PATH\"] = f\"{global_share_path}/:{home_path}/.gazebo/models\"\n    # Get gazebo launch file path\n    pkg_gazebo_ros_path = FindPackageShare(\"gazebo_ros\")",
        "detail": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "documentation": {}
    },
    {
        "label": "spawn_robot",
        "kind": 2,
        "importPath": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "description": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "peekOfCode": "def spawn_robot():\n    \"\"\"Spwan robot in gazebo\"\"\"\n    x_pose = \"0.0\"\n    y_pose = \"0.0\"\n    spawn_ppr_robot_cmd = Node(\n        package=\"gazebo_ros\",\n        executable=\"spawn_entity.py\",\n        arguments=[\n            \"-topic\",\n            \"robot_description\",",
        "detail": "src.gps_nav_demo.mm_gps_nav_simulation.launch.rsp.launch",
        "documentation": {}
    },
    {
        "label": "generate_launch_description",
        "kind": 2,
        "importPath": "src.mm_robot_description.launch.urdf.launch",
        "description": "src.mm_robot_description.launch.urdf.launch",
        "peekOfCode": "def generate_launch_description():  # pylint: disable=missing-function-docstring\n    # Get current ros2 package path\n    pkg_path = FindPackageShare(\"mm_robot_description\")\n    # Get urdf file path\n    urdf = PathJoinSubstitution([pkg_path, \"urdf\", \"robot.urdf.xacro\"])\n    # Get urdf launch file path\n    urdf_tutorial_launch_file = PathJoinSubstitution(\n        [FindPackageShare(\"urdf_tutorial\"), \"launch\", \"display.launch.py\"])\n    # Start urdf display node\n    start_urdf_display = IncludeLaunchDescription(",
        "detail": "src.mm_robot_description.launch.urdf.launch",
        "documentation": {}
    }
]